CompilationUnit:
  [PackageDeclaration] {ImportDeclaration} [TypeDeclaration]

PackageDeclaration:
  package QualifiedName ;

QualifiedName:
  Identifier {"." Identifier}

ImportDeclaration:
  SingleTypeImportDeclaration
  TypeImportOnDemandDeclaration

SingleTypeImportDeclaration:
  import QualifiedName ";"

TypeImportOnDemandDeclaration:
  import QualifiedName ".*;"

TypeDeclaration:
  ClassDeclaration
  InterfaceDeclaration
  ";"

ClassDeclaration:
  {Modifier} class Identifier [Super] [Interfaces] ClassBody

Modifier:
  public
  protected
  abstract
  final
  static
  native

Super:
  extends QualifiedName

Interfaces:
  implements QualifiedName {, QualifiedName}

InterfaceDeclaration:
  {Modifier} interface Identifier [ExtendsInterfaces] InterfaceBody

ExtendsInterfaces:
  extends QualifiedName {, QualifiedName}

ClassBody:
  "{" {ClassBodyDeclaration} "}"

ClassBodyDeclaration:
  ConstructorDeclaration
  FieldDeclaration
  MethodDeclaration
  ;

ConstructorDeclaration:
  {Modifier} ConstructorDeclarator ConstructorBody

ConstructorDeclarator:
  Identifier  "(" [FormalParameterList] ")"

FormalParameterList:
  FormalParamater {, FormalParameter}

FormalParameter:
  Type Identifier

ConstructorBody:
  "{" [ExplicitConstructorInvocation] {BlockStatement} "}"

FieldDeclaration:
  {Modifier} Type Identifier ["=" Expression] ";"

MethodDeclaration:
  {Modifier} ResultType MethodDeclarator MethodBody

MethodDeclarator:
  Identifier "(" [FormalParameterList] ")

ResultType:
  Type
  void

MethodBody:
  Block
  ";"

InterfaceBody:
  "{" {InterfaceMemberDeclaration} "}"

InterfaceMemberDeclaration:
  AbstractMethodDeclaration

AbstractMethodDeclaration:
  {Modifier} ResultType MethodDeclarator ";"

Block:
  "{" {BlockStatement} "}

BlockStatement:
  LocalVariableDeclarationStatement
  Statement

LocalVariableDeclaration:
  Type Identifier "=" Expression

LocalVariableDeclarationStatement:
  LocalVariableDeclaration ";"

Statement:
  StatementWithoutTrailingSubstatement
  IfThenStatement
  IfThenElseStatement
  ForStatement

StatementWithoutTrailingSubstatement:
  Block
  ";"
  ExpressionStatement
  ReturnStatement

ExpressionStatement:
  Expression ";"

Primary:
  PrimaryBase [ PrimaryEnd ]
  ArrayCreationExpression [ PrimaryEndNoArrayAccess ]

PrimaryBase:
  Literal
  "this"
  "(" Expression ")"
  ClassInstanceCreationExpression
  QualifiedName

PrimaryEnd:
  "[" Expression "]" [ PrimaryEndNoArrayAccess ]
  PrimaryEndNoArrayAccess

PrimaryEndNoArrayAccess:
  "(" [ArgumentList] ")" [ PrimaryEnd ]
  "." Identifier [ PrimaryEnd ]

ClassInstanceCreationExpression:
  "new" QualifiedName "(" [ArgumentList] ")"

ArgumentList:
  Expression {, Expression}

MethodInvocation:
  QualifiedName "(" [ArgumentList] ")"
  Primary "." Identifier "(" [ArgumentList] ")"

ArrayCreationExpression:
  "new" QualifiedName "[" [Expression] "]
  "new" PrimitiveType "[" [Expression] "]

Type:
  SingleType ["[" "]"]

SingleType:
  PrimitiveType
  QualifiedName

PrimitiveType:
  "byte"
  "short"
  "int"
  "char"
  "boolean"

ArrayAccess:
  QualifiedName [ Expression ]
  PrimaryNoNewArray [ Expression ]

Expression:
  AssignmentExpression [ "=" AssignmentExpression ]

AssignmentExpression:
  ConditionalExpression

ConditionalExpression:
  ConditionalOrExpression

ConditionalOrExpression:
  ConditionalAndExpression
  ConditionalOrExpression "||" ConditionalAndExpression

ConditionalAndExpression:
  InclusiveOrExpression
  ConditionalAndExpression && InclusiveOrExpression

AndExpression:
  EqualityExpression
  AndExpression "&" EqualityExpression

ExclusiveOrExpression:
  AndExpression
  ExclusiveOrExpression "^" AndExpression

InclusiveOrExpression:
  ExclusiveOrExpression
  InclusiveOrExpression "|" ExclusiveOrExpression

EqualityExpression:
  RelationalExpression
  EqualityExpression "==" RelationalExpression
  EqualityExpression "!=" RelationalExpression

RelationalExpression:
  AdditiveExpression
  RelationalExpression "<" AdditiveExpression
  RelationalExpression ">" AdditiveExpression
  RelationalExpression "<=" AdditiveExpression
  RelationalExpression ">=" AdditiveExpression
  RelationalExpression "instanceof" Type

AdditiveExpression:
  MultiplicativeExpression
  AdditiveExpression "+" MultiplicativeExpression
  AdditiveExpression "-" MultiplicativeExpression

MultiplicativeExpression:
  UnaryExpression
  MultiplicativeExpression "*" UnaryExpression
  MultiplicativeExpression "/" UnaryExpression
  MultiplicativeExpression "%" UnaryExpression

UnaryExpression:
  "-" UnaryExpression
  "!" UnaryExpression
  CastExpression
  Primary

CastExpression:
  "(" Type ")" UnaryExpression

ReturnStatement:
  "return" [Expression] ";"

IfThenStatement:
  "if" "(" Expression ")" Statement

IfThenElseStatement:
  "if" "(" Expression ")" StatementNoShortIf "else" Statement

IfThenElseStatementNoShortIf:
  "if" "(" Expression ")" StatementNoShortIf "else" StatementNoShortIf

StatementNoShortIf:
  StatementWithoutTrailingSubstatement
  IfThenElseStatementNoShortIf
  ForStatementNoShortIf

ForStatement:
  "for" "(" [ForInit] ";" [Expression] ";" [ForUpdate] ")" Statement

ForStatementNoShortIf:
  "for" "(" [ForInit] ";" [Expression] ";" [ForUpdate] ")" StatementNoShortIf

ForInit:
  Expression
  LocalVariableDeclaration

ForUpdate:
  Expression

