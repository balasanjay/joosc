CompilationUnit:
  [PackageDeclaration] {ImportDeclaration} [TypeDeclaration]

PackageDeclaration:
  "package" QualifiedName ";"

QualifiedName:
  Identifier {"." Identifier}

ImportDeclaration:
  "import" QualifiedName [".*"] ";"

TypeDeclaration:
  ClassDeclaration
  InterfaceDeclaration
  ";"

ClassDeclaration:
  ModifierList "class" Identifier ["extends" QualifiedName] ["implements" Interfaces] ClassBody

ModifierList:
  {Modifier}

Modifier:
  public
  protected
  abstract
  final
  static
  native

Interfaces:
  QualifiedName {"," QualifiedName}

InterfaceDeclaration:
  ModifierList "interface" Identifier ["extends" Interfaces] ClassBody

ClassBody:
  "{" {ClassBodyDeclaration} "}"

ClassBodyDeclaration:
  ConstructorDeclaration
  MethodOrFieldDecl
  ";"

ConstructorDeclaration:
  ModifierList ConstructorDeclarator Block

ConstructorDeclarator:
  Identifier  "(" FormalParameterList ")"

FormalParameterList:
  [FormalParameter {, FormalParameter}]

FormalParameter:
  Type Identifier

MethodOrFieldDecl:
  ModifierList Type Identifier MethodOrFieldDeclEnd

MethodOrFieldDeclEnd:
  "(" FormalParameterList ")" MethodBody
  ["=" Expression] ";"

MethodBody:
  Block
  ";"

Block:
  "{" {BlockStatement} "}"

BlockStatement:
  LocalVariableDeclaration ";"
  Statement

LocalVariableDeclaration:
  Type Identifier "=" Expression

Primary:
  "new" SingleType NewEnd
  PrimaryBase [ PrimaryEnd ]

NewEnd:
  "(" ArgumentList ")" [ PrimaryEnd ]
  "[" [Expression] "] [ PrimaryEndNoArrayAccess ]

PrimaryBase:
  Literal
  "this"
  "(" Expression ")"
  QualifiedName

PrimaryEnd:
  "[" Expression "]" [ PrimaryEndNoArrayAccess ]
  PrimaryEndNoArrayAccess

PrimaryEndNoArrayAccess:
  "." Identifier [ PrimaryEnd ]
  "(" ArgumentList ")" [ PrimaryEnd ]

ArgumentList:
  [Expression {"," Expression}]

Type:
  SingleType ["[" "]"]

SingleType:
  PrimitiveType
  QualifiedName

PrimitiveType:
  "byte"
  "short"
  "int"
  "char"
  "boolean"
  "void" // Lol weed me please.

ArrayAccess:
  QualifiedName [ Expression ]
  PrimaryNoNewArray [ Expression ]

Expression:
  AssignmentExpression [ "=" AssignmentExpression ]

AssignmentExpression:
  ConditionalExpression

ConditionalExpression:
  ConditionalOrExpression

ConditionalOrExpression:
  ConditionalAndExpression
  ConditionalOrExpression "||" ConditionalAndExpression

ConditionalAndExpression:
  InclusiveOrExpression
  ConditionalAndExpression && InclusiveOrExpression

AndExpression:
  EqualityExpression
  AndExpression "&" EqualityExpression

ExclusiveOrExpression:
  AndExpression
  ExclusiveOrExpression "^" AndExpression

InclusiveOrExpression:
  ExclusiveOrExpression
  InclusiveOrExpression "|" ExclusiveOrExpression

EqualityExpression:
  RelationalExpression
  EqualityExpression "==" RelationalExpression
  EqualityExpression "!=" RelationalExpression

RelationalExpression:
  AdditiveExpression
  RelationalExpression "<" AdditiveExpression
  RelationalExpression ">" AdditiveExpression
  RelationalExpression "<=" AdditiveExpression
  RelationalExpression ">=" AdditiveExpression
  RelationalExpression "instanceof" Type

AdditiveExpression:
  MultiplicativeExpression
  AdditiveExpression "+" MultiplicativeExpression
  AdditiveExpression "-" MultiplicativeExpression

MultiplicativeExpression:
  UnaryExpression
  MultiplicativeExpression "*" UnaryExpression
  MultiplicativeExpression "/" UnaryExpression
  MultiplicativeExpression "%" UnaryExpression

UnaryExpression:
  "-" UnaryExpression
  "!" UnaryExpression
  CastExpression
  Primary

CastExpression:
  "(" Type ")" UnaryExpression

ReturnStatement:
  "return" [Expression] ";"

WhileStatement:
  "while" "(" Expression ")" Statement

ForStatement:
  "for" "(" [ForInit] ";" [Expression] ";" [ForUpdate] ")" Statement

ForInit:
  LocalVariableDeclaration
  Expression

ForUpdate:
  Expression

IfStatement:
  "if" "(" Expression ")" Statement ["else" Statement]

Statement:
  ";"
  Block
  ReturnStatement
  IfStatement
  ForStatement
  WhileStatement
  Expression ";"
